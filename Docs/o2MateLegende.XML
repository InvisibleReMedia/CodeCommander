<?xml version="1.0"?>
<doc>
    <assembly>
        <name>o2MateLegende</name>
    </assembly>
    <members>
        <member name="T:o2Mate.primaryKey">
            <summary>
            Struct of primary key
            </summary>
        </member>
        <member name="M:o2Mate.primaryKey.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="field">field name</param>
        </member>
        <member name="F:o2Mate.primaryKey.valid">
            <summary>
            Is a valid primary key
            </summary>
        </member>
        <member name="F:o2Mate.primaryKey.field">
            <summary>
            Field name
            </summary>
        </member>
        <member name="T:o2Mate.inconnection">
            <summary>
            Struct in connection (relational field)
            </summary>
        </member>
        <member name="M:o2Mate.inconnection.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="context">context</param>
            <param name="name">name of the array</param>
            <param name="field">field name in the array</param>
        </member>
        <member name="F:o2Mate.inconnection.valid">
            <summary>
            Is a valid info
            </summary>
        </member>
        <member name="F:o2Mate.inconnection.context">
            <summary>
            Context
            </summary>
        </member>
        <member name="F:o2Mate.inconnection.name">
            <summary>
            Name of the array
            </summary>
        </member>
        <member name="F:o2Mate.inconnection.field">
            <summary>
            Field name
            </summary>
        </member>
        <member name="T:o2Mate.depends">
            <summary>
            Struct depends on
            </summary>
        </member>
        <member name="M:o2Mate.depends.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="context">context</param>
            <param name="name">name of the string</param>
            <param name="value">the value</param>
        </member>
        <member name="F:o2Mate.depends.valid">
            <summary>
            Is a valid info
            </summary>
        </member>
        <member name="F:o2Mate.depends.context">
            <summary>
            Context
            </summary>
        </member>
        <member name="F:o2Mate.depends.name">
            <summary>
            Name of the string
            </summary>
        </member>
        <member name="F:o2Mate.depends.value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:o2Mate.ILegende">
            <summary>
            Summary element
            </summary>
        </member>
        <member name="M:o2Mate.ILegende.Load(System.Xml.XmlNode)">
            <summary>
            Load data from xml node
            </summary>
            <param name="node">xml node object</param>
        </member>
        <member name="M:o2Mate.ILegende.Save(System.Xml.XmlWriter)">
            <summary>
            Save data into an xml writer
            </summary>
            <param name="writer">xml writer object</param>
        </member>
        <member name="M:o2Mate.ILegende.Translate(System.String)">
            <summary>
            Make a translation of the summary data in the current language
            </summary>
            <param name="value">value format to translate</param>
            <returns>the text translated</returns>
        </member>
        <member name="P:o2Mate.ILegende.Context">
            <summary>
            Gets or sets the context
            it's a name which identifying a file source or a template
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Name">
            <summary>
            Gets or sets the name from the dictionary element
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Description">
            <summary>
            Gets or sets a description written for summary
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Commentaire">
            <summary>
            Gets or sets a comment written for summary
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Type">
            <summary>
            Gets or sets a specific type (enum, string, integer or a boolean)
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Expression">
            <summary>
            Gets or sets an expression written for summary to work with summary
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Free">
            <summary>
            Gets or sets if is free or not
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.Observe">
            <summary>
            Gets or sets observe info
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.InConnection">
            <summary>
            Gets or sets relational info
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.DependsOn">
            <summary>
            Gets or sets dependent reference
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.PrimaryKey">
            <summary>
            Gets or sets primary key
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsArray">
            <summary>
            Returns true if type is an array
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsNumber">
            <summary>
            Returns true if type is a number
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsDate">
            <summary>
            Returns true if type is a date
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsString">
            <summary>
            Returns true if type is a string
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsEnumeration">
            <summary>
            Returns true if type is an enum set 
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsTemplate">
            <summary>
            Returns true if type is a template
            </summary>
        </member>
        <member name="P:o2Mate.ILegende.IsUnknown">
            <summary>
            Returns true if type is unknown
            </summary>
        </member>
        <member name="T:o2Mate.Legende">
            <summary>
            Summary element implementation
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeArray">
            <summary>
            Array type
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeNumber">
            <summary>
            Number type
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeDate">
            <summary>
            Date type
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeString">
            <summary>
            String type
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeEnumeration">
            <summary>
            Enumeration type
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeUnknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="F:o2Mate.Legende.TypeTemplate">
            <summary>
            Template type
            </summary>
        </member>
        <member name="M:o2Mate.Legende.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:o2Mate.Legende.Load(System.Xml.XmlNode)">
            <summary>
            Load data from xml node
            </summary>
            <param name="node">xml node object</param>
        </member>
        <member name="M:o2Mate.Legende.Save(System.Xml.XmlWriter)">
            <summary>
            Save data into an xml writer
            </summary>
            <param name="writer">xml writer object</param>
        </member>
        <member name="M:o2Mate.Legende.Update(System.Windows.Forms.HtmlElement)">
            <summary>
            Update summary from html element
            </summary>
            <param name="elem">html element object</param>
        </member>
        <member name="M:o2Mate.Legende.Translate(System.String)">
            <summary>
            Make a translation of the summary data in the current language
            </summary>
            <param name="value">value format to translate</param>
            <returns>the text translated</returns>
        </member>
        <member name="P:o2Mate.Legende.Context">
            <summary>
            Gets or sets the context
            it's a name which identifying a file source or a template
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Name">
            <summary>
            Gets or sets the name from the dictionary element
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Commentaire">
            <summary>
            Gets or sets a comment written for summary
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Description">
            <summary>
            Gets or sets a description written for summary
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Type">
            <summary>
            Gets or sets a specific type (enum, string, integer, boolean, etc)
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Expression">
            <summary>
            Gets or sets an expression written for summary to work with summary
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Free">
            <summary>
            Gets or sets if is free or not
            </summary>
        </member>
        <member name="P:o2Mate.Legende.Observe">
            <summary>
            Gets or sets observe info
            </summary>
        </member>
        <member name="P:o2Mate.Legende.InConnection">
            <summary>
            Gets or sets relational info
            </summary>
        </member>
        <member name="P:o2Mate.Legende.DependsOn">
            <summary>
            Gets or sets dependent reference
            </summary>
        </member>
        <member name="P:o2Mate.Legende.PrimaryKey">
            <summary>
            Gets or sets primary key
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsArray">
            <summary>
            Returns true if type is an array
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsNumber">
            <summary>
            Returns true if type is a number
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsDate">
            <summary>
            Returns true if type is a date
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsString">
            <summary>
            Returns true if type is a string
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsEnumeration">
            <summary>
            Returns true if type is an enum set
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsTemplate">
            <summary>
            Returns true if type is a template
            </summary>
        </member>
        <member name="P:o2Mate.Legende.IsUnknown">
            <summary>
            Returns true if type is unknown
            </summary>
        </member>
        <member name="T:o2Mate.ILegendeDict">
            <summary>
            Summary dictionary
            </summary>
        </member>
        <member name="M:o2Mate.ILegendeDict.Load(System.Xml.XmlNode)">
            <summary>
            Load data from an xml node
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:o2Mate.ILegendeDict.Save(System.Xml.XmlWriter)">
            <summary>
            Save data to an xml writer
            </summary>
            <param name="writer">xml writer object</param>
        </member>
        <member name="M:o2Mate.ILegendeDict.Update(System.Windows.Forms.HtmlElement)">
            <summary>
            Update from the web browser
            </summary>
            <param name="elem">html element</param>
        </member>
        <member name="M:o2Mate.ILegendeDict.Clear">
            <summary>
            Clear data
            </summary>
        </member>
        <member name="M:o2Mate.ILegendeDict.Add(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a new element
            </summary>
            <param name="context">the context</param>
            <param name="name">name to create</param>
            <param name="desc">description</param>
            <param name="type">type of data</param>
            <param name="expr">expression</param>
        </member>
        <member name="M:o2Mate.ILegendeDict.CopyFrom(o2Mate.ILegendeDict)">
            <summary>
            Copy from an another summary
            </summary>
            <param name="dict">the summary to copy</param>
        </member>
        <member name="M:o2Mate.ILegendeDict.GetLegendeByIndex(System.Int32)">
            <summary>
            Gets an element by index
            </summary>
            <param name="index">position number</param>
            <returns>a summary element</returns>
        </member>
        <member name="M:o2Mate.ILegendeDict.GetLegendeByName(System.String)">
            <summary>
            Gets an element by name
            </summary>
            <param name="name">name of the element to search</param>
            <returns>a summary element</returns>
        </member>
        <member name="M:o2Mate.ILegendeDict.GetLegendeByName(System.String,System.String)">
            <summary>
            Gets an element by name in a particular context
            </summary>
            <param name="name">name of the element to search</param>
            <param name="context">a particular context</param>
            <returns>a summary element</returns>
        </member>
        <member name="P:o2Mate.ILegendeDict.Count">
            <summary>
            Gets the number of element
            </summary>
        </member>
        <member name="T:o2Mate.LegendeDict">
            <summary>
            Summary implementation
            </summary>
        </member>
        <member name="M:o2Mate.LegendeDict.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:o2Mate.LegendeDict.Clear">
            <summary>
            Clear data
            </summary>
        </member>
        <member name="M:o2Mate.LegendeDict.Load(System.Xml.XmlNode)">
            <summary>
            Load data from an xml node
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:o2Mate.LegendeDict.Save(System.Xml.XmlWriter)">
            <summary>
            Save data to an xml writer
            </summary>
            <param name="writer">xml writer object</param>
        </member>
        <member name="M:o2Mate.LegendeDict.Update(System.Windows.Forms.HtmlElement)">
            <summary>
            Update from the web browser
            </summary>
            <param name="elem">html element</param>
        </member>
        <member name="M:o2Mate.LegendeDict.GetLegendeByIndex(System.Int32)">
            <summary>
            Gets an element by index
            </summary>
            <param name="index">position number</param>
            <returns>a summary element</returns>
        </member>
        <member name="M:o2Mate.LegendeDict.GetLegendeByName(System.String)">
            <summary>
            Gets an element by name
            </summary>
            <param name="name">name of the element to search</param>
            <returns>a summary element</returns>
        </member>
        <member name="M:o2Mate.LegendeDict.GetLegendeByName(System.String,System.String)">
            <summary>
            Gets an element by name in a particular context
            </summary>
            <param name="name">name of the element to search</param>
            <param name="context">a particular context</param>
            <returns>a summary element</returns>
        </member>
        <member name="M:o2Mate.LegendeDict.Add(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a new element
            </summary>
            <param name="context">the context</param>
            <param name="name">name to create</param>
            <param name="desc">description</param>
            <param name="type">type of data</param>
            <param name="expr">expression</param>
        </member>
        <member name="M:o2Mate.LegendeDict.CopyFrom(o2Mate.ILegendeDict)">
            <summary>
            Copy from an another summary
            </summary>
            <param name="dict">the summary to copy</param>
        </member>
        <member name="M:o2Mate.LegendeDict.GetEnumerator">
            <summary>
            Get enumerator to iterate through summary elements
            </summary>
            <returns></returns>
        </member>
        <member name="P:o2Mate.LegendeDict.Count">
            <summary>
            Gets the number of element
            </summary>
        </member>
    </members>
</doc>
